import os
import telebot
import requests
from io import BytesIO
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
URL = os.getenv('SERVER_URL')


@bot.message_handler(commands=['start'])
def hello(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤—ñ—Ç, —Ç—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ —Ç–∞ –≤–∫–∞–∑–∞—Ç–∏ —ó—Ö–Ω—ñ –ø—Ä–æ—Ñ–µ—Å—ñ—ó. –í–ø–µ—Ä–µ–¥ –æ–∑–Ω–∞–π–æ–º—Å—è –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–æ—Å—å –ø–æ–∫–ª–∞—Ü–∞—Ç–∏.")


@bot.message_handler(commands=['get_all_friends'])
def get_all_friends(message):
    url = URL + '/friends'
    response = requests.get(url)
    if response.status_code:
        for friend in response.json():
            photo_url = URL + friend['photo_url']
            photo = requests.get(photo_url)
            text = f'–î—Ä—É–≥: {friend["name"]}\n–ü—Ä–æ—Ñ–µ—Å—ñ—è: {friend["profession"]}'

            # –ó—Ä–æ–±–∏–≤ –æ–∫—Ä–µ–º—É –∫–ª–∞–≤—É –¥–ª—è —Ç–æ–≥–æ —â–æ–± –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤ –∫–∞–ª–±–µ–∫ ID
            keyboard = InlineKeyboardMarkup()
            button = InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", callback_data=f'id:{friend["id"]}')
            button_ai = InlineKeyboardButton(text='–°–ø–∏—Ç–∞—Ç–∏ AI',
                                             switch_inline_query_current_chat=f'\n–ó–∞–ø–∏—Ç–∞–π—Ç–µ AI –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é {friend["profession"]}üîΩ\n')
            keyboard.add(button, button_ai)

            bot.send_photo(message.chat.id, BytesIO(photo.content),
                           caption=text,
                           reply_markup=keyboard
                           )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—ñ–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ" –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∑ –¥—Ä—É–∑—ñ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if 'id' in call.data.split(':'):
        friend_id = call.data.split(':')[1]
        friend_url = URL + '/friends/' + friend_id
        friend = requests.get(friend_url).json()
        photo_url = URL + friend['photo_url']
        photo = requests.get(photo_url)
        text = (f'–í—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—Ä—É–≥–∞\n'
                f'–Ü–º\'—è: {friend["name"]}\n'
                f'–ü—Ä–æ—Ñ–µ—Å—ñ—è: {friend["profession"]}\n'
                f'–û–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó: {friend["profession_description"]}\n'
                f'URL:\n{photo_url}'
                )

        keyboard = InlineKeyboardMarkup()
        button_ai = InlineKeyboardButton(text='–°–ø–∏—Ç–∞—Ç–∏ AI',
                                         switch_inline_query_current_chat=f'\n–ó–∞–ø–∏—Ç–∞–π—Ç–µ AI –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é {friend["profession"]}üîΩ\n')
        keyboard.add(button_ai)

        bot.edit_message_media(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            media=InputMediaPhoto(
                media=BytesIO(photo.content),
                caption=text,
            ),
            reply_markup=keyboard
        )


user_state = {}


@bot.message_handler(commands=['add_friend'])
def start_step(message):
    user_state[message.chat.id] = {'step': 'name'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —ñ–º'—è –¥—Ä—É–≥–∞:")


@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get('step') == 'name')
def title_step(message):
    user_state[message.chat.id]['name'] = message.text
    user_state[message.chat.id]['step'] = 'profession'
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–µ—Å—ñ—è –¥—Ä—É–≥–∞:")


@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get('step') == 'profession')
def description_step(message):
    user_state[message.chat.id]['profession'] = message.text
    user_state[message.chat.id]['step'] = 'profession_description'
    bot.send_message(message.chat.id, "–î–æ–¥–∞–π –æ–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó –¥—Ä—É–≥–∞")


@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get('step') == 'profession_description')
def description_step(message):
    user_state[message.chat.id]['profession_description'] = message.text
    user_state[message.chat.id]['step'] = 'photo'
    bot.send_message(message.chat.id, "–ö–∏–Ω—å —Ñ–æ—Ç–∫—É –¥—Ä—É–≥–∞")


@bot.message_handler(content_types=['photo'])
def photo_step(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    files = {'photo': (file_info.file_path.split('/')[-1], downloaded_file)}

    name = user_state[message.chat.id]['name']
    profession = user_state[message.chat.id]['profession']
    profession_description = user_state[message.chat.id]['profession_description']

    backend_url = URL + '/friends/'

    response = requests.post(
        backend_url,
        data={
            "name": name,
            'profession': profession,
            "profession_description": profession_description,
        },
        files=files
    )

    if response.status_code:
        bot.send_message(message.chat.id, "–î—Ä—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞: {response.status_code}")

    user_state.pop(message.chat.id, None)


@bot.message_handler(content_types=['text'])
def ai_handler(message):
    if '–ó–∞–ø–∏—Ç–∞–π—Ç–µ AI –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é' in message.text:
        question = message.text.split('\n')[-1]
        profession = message.text.split('üîΩ')[0].split(' ')[-1]

        bot.send_message(message.chat.id, '–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ AI –¥—É–º–∞—î ...')

        url = URL + '/llm/ask'
        response = requests.post(
            url,
            json={
                'profession': profession,
                'question': question
            }
        )
        data = response.json()
        ai_text = data["candidates"][0]["content"]["parts"][0]["text"]
        bot.send_message(message.chat.id, ai_text)


if __name__ == '__main__':
    bot.infinity_polling(timeout=10)
